Usage:

Example of 'foo_bar' module in `foo_bar.tf`.

- list item 1
- list item 2

Even inline **formatting** in _here_ is possible.
and some [link](https://domain.com/)

* list item 3
* list item 4

```hcl
module "foo_bar" {
  source = "github.com/foo/bar"

  id   = "1234567890"
  name = "baz"

  zones = ["us-east-1", "us-west-1"]

  tags = {
    Name         = "baz"
    Created-By   = "first.last@email.com"
    Date-Created = "20180101"
  }
}
```

Here is some trailing text after code block,
followed by another line of text.

| Name | Description     |
|------|-----------------|
| Foo  | Foo description |
| Bar  | Bar description |

== Requirements

The following requirements are needed by this module:

- terraform (>= 0.12)

- aws (>= 2.15.0)

- foo (>= 1.0)

- random (>= 2.2.0)

== Providers

The following providers are used by this module:

- tls

- foo (>= 1.0)

- aws (>= 2.15.0)

- aws.ident (>= 2.15.0)

- null

== Modules

The following Modules are called:

=== bar

Source: baz

Version: 4.5.6

=== foo

Source: bar

Version: 1.2.3

=== baz

Source: baz

Version: 4.5.6

=== foobar

Source: git@github.com:module/path

Version: v7.8.9

== Resources

The following resources are used by this module:

- foo_resource.baz (resource)
- https://registry.terraform.io/providers/hashicorp/null/latest/docs/resources/resource[null_resource.foo] (resource)
- https://registry.terraform.io/providers/hashicorp/tls/latest/docs/resources/private_key[tls_private_key.baz] (resource)
- https://registry.terraform.io/providers/hashicorp/aws/latest/docs/data-sources/caller_identity[aws_caller_identity.current] (data source)
- https://registry.terraform.io/providers/hashicorp/aws/latest/docs/data-sources/caller_identity[aws_caller_identity.ident] (data source)

== Required Inputs

The following input variables are required:

=== unquoted

Description: n/a

Type: `any`

=== string-2

Description: It's string number two.

Type: `string`

=== number-2

Description: It's number number two.

Type: `number`

=== map-2

Description: It's map number two.

Type: `map`

=== list-2

Description: It's list number two.

Type: `list`

=== input_with_underscores

Description: A variable with underscores.

Type: `any`

=== string_no_default

Description: n/a

Type: `string`

=== variable_with_two_validations

Description: This variable has two validations

Type: `string`

== Optional Inputs

The following input variables are optional (have default values):

=== bool-3

Description: n/a

Type: `bool`

Default: `true`

=== bool-2

Description: It's bool number two.

Type: `bool`

Default: `false`

=== bool-1

Description: It's bool number one.

Type: `bool`

Default: `true`

=== string-3

Description: n/a

Type: `string`

Default: `""`

=== string-1

Description: It's string number one.

Type: `string`

Default: `"bar"`

=== string-special-chars

Description: n/a

Type: `string`

Default: `"\\.<>[]{}_-"`

=== number-3

Description: n/a

Type: `number`

Default: `"19"`

=== number-4

Description: n/a

Type: `number`

Default: `15.75`

=== number-1

Description: It's number number one.

Type: `number`

Default: `42`

=== map-3

Description: n/a

Type: `map`

Default: `{}`

=== map-1

Description: It's map number one.

Type: `map`

Default:
[source,json]
----
{
  "a": 1,
  "b": 2,
  "c": 3
}
----

=== list-3

Description: n/a

Type: `list`

Default: `[]`

=== list-1

Description: It's list number one.

Type: `list`

Default:
[source,json]
----
[
  "a",
  "b",
  "c"
]
----

=== input-with-pipe

Description: It includes v1 | v2 | v3

Type: `string`

Default: `"v1"`

=== input-with-code-block

Description: This is a complicated one. We need a newline.  
And an example in a code block
```
default     = [
  "machine rack01:neptune"
]
```

Type: `list`

Default:
[source,json]
----
[
  "name rack:location"
]
----

=== long_type

Description: This description is itself markdown.

It spans over multiple lines.

Type:
[source,hcl]
----
object({
    name = string,
    foo  = object({ foo = string, bar = string }),
    bar  = object({ foo = string, bar = string }),
    fizz = list(string),
    buzz = list(string)
  })
----

Default:
[source,json]
----
{
  "bar": {
    "bar": "bar",
    "foo": "bar"
  },
  "buzz": [
    "fizz",
    "buzz"
  ],
  "fizz": [],
  "foo": {
    "bar": "foo",
    "foo": "foo"
  },
  "name": "hello"
}
----

=== no-escape-default-value

Description: The description contains `something_with_underscore`. Defaults to 'VALUE_WITH_UNDERSCORE'.

Type: `string`

Default: `"VALUE_WITH_UNDERSCORE"`

=== with-url

Description: The description contains url. https://www.domain.com/foo/bar_baz.html

Type: `string`

Default: `""`

=== string_default_empty

Description: n/a

Type: `string`

Default: `""`

=== string_default_null

Description: n/a

Type: `string`

Default: `null`

=== number_default_zero

Description: n/a

Type: `number`

Default: `0`

=== bool_default_false

Description: n/a

Type: `bool`

Default: `false`

=== list_default_empty

Description: n/a

Type: `list(string)`

Default: `[]`

=== object_default_empty

Description: n/a

Type: `object({})`

Default: `{}`

=== variable_with_no_validation

Description: This variable has no validation

Type: `string`

Default: `""`

=== variable_with_one_validation

Description: This variable has one validation

Type: `string`

Default: `""`

== Outputs

The following outputs are exported:

=== unquoted

Description: It's unquoted output.

=== output-2

Description: It's output number two.

=== output-1

Description: It's output number one.

=== output-0.12

Description: terraform 0.12 only

## This is an example of a footer

It looks exactly like a header, but is placed at the end of the document